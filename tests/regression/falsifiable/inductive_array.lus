

node Since_array(const n: int; X: bool^n; Y : bool ) returns ( SinceXY : bool^n );
let
  SinceXY[i] = X[i] or (Y and (false -> pre SinceXY[i]));
tel

node Last_array(const n: int; A: bool^n; V : int^n ; d: int) returns ( L : int^n );
let
  L[i] = if A[i] then V[i] else (d -> pre L[i]) ;
tel

node min( const n: int; X: bool^n ) returns ( index: int ) ;
  var A : int^n ;
let
  A[i] = if i > 0 and A[i-1] <> -1 then A[i-1]
         else if X[i] then i else -1 ;
  index = A[n-1] ;
tel

node count( const n : int ; B : bool^n ) returns ( C : int ) ;
  var A : int^n ;
let
  A[i] = if i = 0 then if B[i] then 1 else 0
         else A[i-1] + (if B[i] then 1 else 0);
  C = A[n-1] ;
tel
--------------------------------------------------------------------------------

node Buffer( const n : int; Init : int ; Request: bool^n; Turn : bool^n; Value : int^n )
returns ( Accepted : bool^n; SharedValue : int ) ;
(*@contract

  assume n > 0 ;
  assume n <= 4 ;

  var NoOtherRequests : bool^n = Since_array(n, Accepted, count(n,Request) = 0);
  var LastWrite : int^n = Last_array(n, Accepted, Value, Init) ;

  guarantee "maintain" true ->
   forall (i:int) 0 <= i and i < n =>
    NoOtherRequests[i] => SharedValue = LastWrite[i];
*)

var index : int ;
let

  Accepted = Since_array(n, pre Accepted, count(n,Request) = 0) ;

  index = min(n, Accepted) ;

  SharedValue = if index >= 0 then Value[index]
                else (Init -> pre SharedValue) ;
 
tel
