contract A(x: int) returns (y: int);
let
   var z: int = x;
   mode m1
   (require z = x;);
tel

contract B(x: int) returns (y: int);
let
   var s1: int = x;
   var B::z: int = x + 1;
   import A(s1) returns (y);
   mode m2
   (require A::m1;
    require z = x+11;);
tel


node n (x, y, z, w: t) returns (ok: bool; ok2:int);
(*@contract
  import B(x) returns(ok2);
*)
let
  ok = x = A or x = B or x = C;
  --%PROPERTY ok;
  --%PROPERTY x = y or x = z or x = w or y = z or y = w;
tel
type t = enum {A, B, C};
